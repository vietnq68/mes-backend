#!/usr/bin/env node

/**
 * Module dependencies.
 */


var config = require('../config');
var debug = require('debug')('mes-backend:server');
var mongoose = require('mongoose');
var app = require('../app');
var server = app.get('server');


const connection = connectDb();
connection
  .on('error', console.log)
  .on('disconnected', connectDb)
  .once('open', listen);
/**
 * Listen on provided port, on all network interfaces.
 */


function listen() {
  server.listen(app.get('port'));
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function connectDb() {
  var options = { server: { socketOptions: { keepAlive: 1 } } };
  var connection = mongoose.connect(config.db, options).connection;
  return connection;
}
